// prisma/schema.prisma - Multi-Tenant Version
// Single Database with Tenant Isolation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TENANT MODEL
// ============================================

model Tenant {
  id          String   @id @default(cuid())
  name        String   // "Beauty Pageant 2026", "School Election", etc.
  slug        String   @unique // "beauty-pageant-2026"
  subdomain   String?  @unique // Optional: for subdomain routing

  // Branding
  logoUrl     String?
  primaryColor String? @default("#dc2626")
  secondaryColor String? @default("#f97316")

  // Configuration (JSON)
  config      Json     @default("{}")

  // Status
  active      Boolean  @default(true)

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events      Event[]
  candidates  Candidate[]
  votes       Vote[]
  results     Result[]
  users       User[]

  @@map("tenants")
}

// ============================================
// USER MODEL (for admin authentication)
// ============================================

model User {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  email       String
  password    String   // Hashed with bcrypt
  name        String
  role        String   @default("admin") // admin, moderator, viewer

  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, email]) // Email unique per tenant
  @@index([tenantId])
  @@map("users")
}

// ============================================
// EXISTING MODELS WITH TENANT SUPPORT
// ============================================

model Candidate {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name        String
  municipality String
  photoUrl    String?
  bio         String?
  order       Int      @default(autoincrement())
  active      Boolean  @default(true)

  // Custom fields support (JSON)
  customData  Json?    @default("{}")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  votes       Vote[]
  results     Result[]

  @@index([tenantId])
  @@index([tenantId, active])
  @@index([tenantId, name])
  @@index([tenantId, municipality])
  @@map("candidates")
}

model Vote {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  eventId     String?  // Optional: link to specific event
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)

  voterIp     String
  voterEmail  String?
  voterName   String?

  // Ranked positions (1-5)
  firstPlace  String
  secondPlace String
  thirdPlace  String
  fourthPlace String
  fifthPlace  String

  createdAt   DateTime @default(now())

  candidate   Candidate? @relation(fields: [firstPlace], references: [id])

  @@unique([tenantId, voterIp]) // One vote per IP per tenant
  @@index([tenantId])
  @@index([tenantId, eventId])
  @@map("votes")
}

model Event {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name        String   // "Flor de Tabasco 2026"
  description String?
  startDate   DateTime
  endDate     DateTime
  active      Boolean  @default(true)
  votingOpen  Boolean  @default(false)

  // Event-specific config (overrides tenant config)
  config      Json?    @default("{}")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  votes       Vote[]

  @@index([tenantId])
  @@index([tenantId, active])
  @@map("events")
}

model Result {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  position    Int      // 1-5
  votes       Int      @default(0)
  percentage  Float    @default(0)
  calculatedAt DateTime @default(now())

  @@index([tenantId])
  @@index([tenantId, position])
  @@map("results")
}

// ============================================
// CONFIGURATION SCHEMA REFERENCE
// ============================================

// Tenant.config JSON structure:
// {
//   "voting": {
//     "positions": 5,
//     "pointsSystem": {
//       "1st": 5,
//       "2nd": 4,
//       "3rd": 3,
//       "4th": 2,
//       "5th": 1
//     },
//     "allowDuplicates": false,
//     "ipValidation": true,
//     "emailVerification": false
//   },
//   "candidates": {
//     "requiredFields": ["name", "municipality", "photoUrl"],
//     "customFields": [
//       {
//         "name": "age",
//         "label": "Edad",
//         "type": "number",
//         "required": false
//       }
//     ]
//   },
//   "branding": {
//     "eventTitle": "Flor de Tabasco 2026",
//     "description": "Vota por tu favorita",
//     "logoUrl": "/logo.png"
//   },
//   "features": {
//     "publicResults": true,
//     "anonymousVoting": true,
//     "realTimeResults": true
//   }
// }
